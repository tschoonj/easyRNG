/*
Copyright (c) 2016, Tom Schoonjans
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of easyRNG nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/** \file easy_rng.h
 *  \brief The random number generator API
 *  \author Tom Schoonjans
 *
 *  This header contains all functions and definitions that are necessary to instantiate a random number generator,
 *  as well as to obtain uniformly distributed random numbers.
 *  The API is strongly modelled after the GNU Scientific Library's gsl_rng.h header, with some notable exceptions:
 *  
 *  * easy_rng_state() and easy_rng_size() are not implemented as the required information is not accessible in the C++11 templates
 *  * easy_rng_equal() has been added to compare two random number generators for equality
 *  * easy_rng_fwrite and easy_rng_fread write a string (ASCII) representation of the state to file, instead of a binary stream.
 *  * Only 9 types of random number generators are offered here, in accordance with the C++11 standard. The GNU Scientific library offers dozens more. It should be noted though that the GNU Scientific library does not have the 64-bit implementation of the Mersenne-Twister (easy_rng_mt19937_64)
 *
 *  \note the description of the different types of random number generators on this page was sourced from [cppreference.com](http://en.cppreference.com/w/cpp/numeric/random). Please consult this website for more information.
 */ 

#ifndef EASY_RNG_H
#define EASY_RNG_H

#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef EASYRNG_EXTERN
	#define EASYRNG_EXTERN extern
#endif

#ifndef DOXYGEN_SHOULD_SKIP_THIS
struct _easy_rng;
#endif

/** A random number generator instance
 *
 * Pointers to these instances are returned by easy_rng_alloc() and should be freed with easy_rng_free().
 * Its contents are intentionally not accessible.
 */
typedef struct _easy_rng easy_rng;

/** A struct whose instances represent the different types of random number generators that are offered by easyRNG
 *
 * There is never a need to instantiate this class yourself. Instead use the global variables to pass to easy_rng_alloc() when constructing a random number generator.
 */
typedef struct {
	const char *name; ///< The name of the random number generate type, as a string.
	unsigned long int max; ///< The maximum value that can be generated by this type
	unsigned long int min; ///< The minimum value that can be generated by this type
} easy_rng_type;

/** Create a new random number generator instance
 *
 * \param T The type of a random number generator to use
 * \returns A newly allocated random number generator that has been seeded with the default seed.
 */
EASYRNG_EXTERN
easy_rng * easy_rng_alloc (const easy_rng_type * T);

/** Set the current seed.
 *
 * Changes the current seed of the random number generator to s. This will change the generated sequence from this point onwards.
 * \param r The random number generator instance
 * \param s The new seed
 */
EASYRNG_EXTERN
void easy_rng_set (const easy_rng * r, unsigned long int s);

/** Frees the memory associated with a random number generator instance
 *
 * After calling this function, do not attempt to pass the random number generator instance to any other function!
 * \param r The random number generator instance
 */
EASYRNG_EXTERN
void easy_rng_free (easy_rng * r);

/** Generate a random, uniformally distributed unsigned long int.
 *
 * This value will be within the interval defined by easy_rng_min() and easy_rng_max().
 * \param r The random number generator instance
 * \returns A unsigned long int
 */
EASYRNG_EXTERN
unsigned long int easy_rng_get (const easy_rng * r);

/** Generate a random, uniformally distributed double precision floating point number in the interval [0,1)
 *
 * This interval includes 0, but excludes 1
 * \param r The random number generator instance
 * \returns A double precision floating point number between 0 and 1
 */
EASYRNG_EXTERN
double easy_rng_uniform (const easy_rng * r);

/** Generate a random, uniformally distributed double precision floating point number in the interval (0,1)
 *
 * This interval excludes both 0 and 1
 * \param r The random number generator instance
 * \returns A double precision floating point number between 0 and 1
 */
EASYRNG_EXTERN
double easy_rng_uniform_pos (const easy_rng * r);

/** Generate a random, uniformally distributed unsigned long int in the interval [0, n)
 *
 * This interval includes 0, but excluded n, so the highest possibly generated value is n-1
 * \param r The random number generator instance
 * \param n The upper limit (exclusive) of the generated values
 * \returns An unsigned long int between 0 and n-1
 */
EASYRNG_EXTERN
unsigned long int easy_rng_uniform_int (const easy_rng * r, unsigned long int n);

/** Return the name of the random generator type as string 
 *
 * Do not attempt to free the string!
 * \param r The random number generator instance
 * \returns The name of the random generator type
 */
EASYRNG_EXTERN
const char * easy_rng_name (const easy_rng * r);

/** Return the maximum value that can be returned by easy_rng_get()
 *
 * This value depends on the random number generator type that was used to initialize the random number generator instance with easy_rng_alloc().
 * \param r The random number generator instance
 * \returns The maximum value that can be returned by easy_rng_get()
 */ 
EASYRNG_EXTERN
unsigned long int easy_rng_max (const easy_rng * r);

/** Return the minimum value that can be returned by easy_rng_get()
 *
 * This value depends on the random number generator type that was used to initialize the random number generator instance with easy_rng_alloc().
 * \param r The random number generator instance
 * \returns The minimum value that can be returned by easy_rng_get()
 */ 
EASYRNG_EXTERN
unsigned long int easy_rng_min (const easy_rng * r);

/* Not going to happen...
void * easy_rng_state (const easy_rng * r);

size_t easy_rng_size (const easy_rng * r);
*/

/** Return a NULL terminated array with all available random number generator types
 *
 * This array must not be freed!
 * \returns the array
 */
EASYRNG_EXTERN
const easy_rng_type ** easy_rng_types_setup (void);

/** Set the default seed and/or default random number generator type
 *
 * This method parses the environment variables \c EASY_RNG_TYPE and \c EASY_RNG_SEED to extract resp. the
 * random number generator type and seed that will be used when using easy_rng_alloc() with easy_rng_default
 * to instantiate and seed a new random number generator.
 * \returns easy_rng_default
 */
EASYRNG_EXTERN
const easy_rng_type * easy_rng_env_setup (void);

/** Copy the state of a random number generator \c src into another random number generator \c dest
 *
 * Afterwards, \c src and \c dest will produce identical sequences of random numbers.
 * \c dest must have been allocated with the exact same random number generator \c src!
 * \param dest The destination random number generator
 * \param src The source random number generator
 * \returns 0 on success, -1 on failure
 */
EASYRNG_EXTERN
int easy_rng_memcpy (easy_rng * dest, const easy_rng * src);

/** Creates an exact copy of the random number generator \c c.
 *
 * \c c and its freshly created clone will produce identical sequences of random numbers from now onwards.
 * Free the clone using easy_rng_free().
 * \param r The random number generator instance
 * \returns The cloned random number generator
 */
EASYRNG_EXTERN
easy_rng * easy_rng_clone (const easy_rng * r);

/** Test if two random number generator instances are identical
 *
 * This test will verify both type and state for equality.
 * \param ra The first random number generator instance
 * \param rb The second random number generator instance
 * \returns 1 if equal, 0 otherwise
 */
EASYRNG_EXTERN
int easy_rng_equal(const easy_rng * ra, const easy_rng *rb);

/** Write the state of the random number generator to a file
 *
 * This writes only the state, not the type of the generator!
 * \param stream Filehandle to write the state to
 * \param r The random number generator instance
 * \returns 0 on success, -1 otherwise
 */
EASYRNG_EXTERN
int easy_rng_fwrite (FILE * stream, const easy_rng * r);

/** Read the state of the random number generator from a file
 *
 * This reads only the state, not the type of the generator!
 * \param stream Filehandle to read the state from
 * \param r The random number generator instance
 * \returns 0 on success, -1 otherwise
 */
EASYRNG_EXTERN
int easy_rng_fread (FILE * stream, easy_rng * r);

/** Linear congruential engine, discovered in 1969 by Lewis, Goodman and Miller, adopted as "Minimal standard" in 1988 by Park and Miller 
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_minstd_rand0;

/** Linear congruential engine, newer "Minimum standard", recommended by Park, Miller, and Stockmeyer in 1993
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_minstd_rand;

/** 32-bit Mersenne Twister engine, published by Matsumoto and Nishimura, 1998
 *
 * This is also the type that easy_rng_default maps to, unless overridden by EASY_RNG_TYPE and easy_rng_env_setup() is called.
 * In case of doubt, always use this type.
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_mt19937;

/** 64-bit Mersenne Twister engine, published by Matsumoto and Nishimura, 2000
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_mt19937_64;

/** A subtract with carry engine
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_ranlux24_base;

/** A subtract with carry engine
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_ranlux48_base;

/** A subtract with carry engine, that discards a certain amount of data produced by the base engine.
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_ranlux24;

/** A subtract with carry engine, that discards a certain amount of data produced by the base engine.
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_ranlux48;

/** A shuffle order engine
 *
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_knuth_b;

/** The default random number generator type
 *
 * Maps by default to easy_rng_mt19937
 */
EASYRNG_EXTERN
const easy_rng_type *easy_rng_default;

/** The seed that will be used to initialize newly allocated random number generators
 *
 */
EASYRNG_EXTERN
unsigned long int easy_rng_default_seed;


#ifdef __cplusplus
}
#endif

#endif
